{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileInfo/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editmode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","ProfileInfo","profile","isOwner","savePhoto","Preloader","className","s","dashboard","descr","src","photos","large","userAva","alt","mainPhoto","type","target","files","fullName","aboutMe","contacts","vk","Post","item","message","likesCount","MyPosts","React","memo","posts","map","p","id","myPosts","AddNewPostReduxForm","onSubmit","values","addPost","newPostText","maxLength30","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","Profile","ProfileContainer","userID","this","match","params","authorizedUserId","history","push","getUsersProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Object","keys","length","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.d750c338.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"ProfileInfo_dashboard__2BzoH\",\"descr\":\"ProfileInfo_descr__2kmG_\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2K2FL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2uU9M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ULwHT\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editmode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() =>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return (\r\n            <div>\r\n                {!editmode &&\r\n\t\t\t\t    <div>\r\n\t\t\t\t    \t<span onDoubleClick={onEditMode}>{props.status || '--------'}</span>\r\n\t\t\t\t    </div>\r\n                }\r\n                {editmode &&\r\n                    <div>\r\n                        <input onBlur={offEditMode} onChange={onStatusChange} value={status} autoFocus/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n};\r\n\r\n","import React, { ChangeEvent } from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../../../Redux/Profile-reducer\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport userAva from \"../../../assets/images/userAva.png\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n}\r\n\r\n\r\nexport function ProfileInfo({profile, status, updateStatus, isOwner, savePhoto}: ProfileInfoPropsType) {\r\n\r\n    if(!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n       if(e.target.files){\r\n           savePhoto(e.target.files[0])\r\n       }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dashboard}>Dashboard</div>\r\n            <div className={s.descr}>\r\n                <img src={profile.photos.large || userAva} alt=\"ava\" className={s.mainPhoto}/>\r\n                {isOwner && <input type=\"file\" onChange={mainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                <div>Full Name: {profile.fullName}</div>\r\n                <div>About: {profile.aboutMe}</div>\r\n                <div>VK: {profile.contacts.vk}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\nexport function Post(props: PostPropsType) {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img\r\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQn-HdBk6kXnLfK7VTkMn3YWhoct3OsGPUoFA&usqp=CAU\"\r\n                    alt=\"ava\"/>\r\n                {props.message}\r\n                <div>\r\n                    <span>Likes</span> {props.likesCount}\r\n                </div>\r\n                <div>\r\n                    <span>Dislikes</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsStateType} from \"../../../Redux/Profile-reducer\";\r\nimport {InjectedFormProps, reduxForm, Field} from \"redux-form\";\r\nimport {required, maxLengthCreator} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    posts: Array<PostsStateType>\r\n}\r\n\r\nexport const MyPosts = React.memo( (props: MyPostsPropsType) => {\r\n\r\n    const posts = props.posts.map(p => <Post id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    // const newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    // const onAddPost = () => {\r\n    //     props.addPost()\r\n    // }\r\n    //\r\n    // const onChangeHandler = () => {\r\n    //     let text = newPostElement.current ? newPostElement.current.value : \"\";\r\n    //     props.updateNewPostText(text);\r\n    // }\r\n\r\n    const addNewPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <AddNewPostReduxForm onSubmit={addNewPost}/>\r\n            <div>\r\n                New Post\r\n            </div>\r\n            <div className={s.posts}>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst AddNewPostForm = (props: InjectedFormProps) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newPostText\"} placeholder='Post message'\r\n                       validate={[required, maxLength30]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<any>({form: \"profileAddNewPostForm\"})(AddNewPostForm)\r\n","import {addPost, PostsStateType} from \"../../../Redux/Profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/Redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MyPostsContainerPropsType ={}\r\n\r\nexport type MapStateToPropsType = {\r\n    posts: Array<PostsStateType>\r\n\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPost(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, MyPostsContainerPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n","import React from \"react\";\r\nimport s from \"./Profile.module.css\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../Redux/Profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n}\r\n\r\nexport function Profile(props: ProfilePropsType) {\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo\r\n                profile={props.profile} status={props.status}\r\n                         updateStatus={props.updateStatus} isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Profile} from \"../Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUsersProfile, ProfileType, savePhoto, updateStatus} from \"../../../Redux/Profile-reducer\";\r\nimport {AppStateType} from \"../../../Redux/Redux-store\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\ntype ProfileContainerPropsType  = {}\r\n\r\ntype PathParamsType = {\r\n    userID: string\r\n}\r\nexport type MapStateToPropsType = {\r\n    profile: ProfileType | {},\r\n    status: string\r\n    authorizedUserId: any\r\n    isAuth: boolean\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    getUsersProfile: (userID: string) => void\r\n    getStatus: (userID: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n}\r\n\r\ntype ownPropsType = MapStateToPropsType & MapDispatchToPropsType ;\r\n\r\ntype ProfilePropsType = RouteComponentProps<PathParamsType> & ownPropsType;\r\n\r\n  class ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n\r\n       refreshProfile() {\r\n           let userID = this.props.match.params.userID;\r\n           if (!userID) {\r\n               userID = this.props.authorizedUserId;\r\n               if (!userID){\r\n                   this.props.history.push('/login')\r\n               }\r\n           }\r\n           this.props.getUsersProfile(userID)\r\n           this.props.getStatus(userID)\r\n      }\r\n\r\n    componentDidMount(): void {\r\n            this.refreshProfile()\r\n\r\n        // setTimeout(() => {\r\n        //\r\n        // }, 1000)\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n           if(this.props.match.params.userID != prevProps.match.params.userID) {\r\n               this.refreshProfile()\r\n           }\r\n    }\r\n\r\n      render() {\r\n        if(Object.keys(this.props.profile).length === 0) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n                <Profile {...this.props}\r\n                    isOwner={!this.props.match.params.userID}\r\n                         profile={this.props.profile as ProfileType}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, ProfileContainerPropsType, AppStateType>(mapStateToProps, {\r\n        getUsersProfile, getStatus, updateStatus, savePhoto,\r\n    }),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}