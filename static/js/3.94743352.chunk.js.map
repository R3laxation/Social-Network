{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileInfo/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editmode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","ProfileInfo","profile","console","log","className","s","dashboard","descr","src","photos","small","alt","fullName","aboutMe","contacts","vk","Preloader","Post","item","message","likesCount","MyPosts","React","memo","posts","map","p","id","myPosts","AddNewPostReduxForm","onSubmit","values","addPost","newPostText","maxLength30","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","Profile","ProfileContainer","userID","this","match","params","authorizedUserId","history","push","getUsersProfile","getStatus","Object","keys","length","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.94743352.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"ProfileInfo_dashboard__2BzoH\",\"descr\":\"ProfileInfo_descr__2kmG_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2uU9M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ULwHT\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editmode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() =>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return (\r\n            <div>\r\n                {!editmode &&\r\n\t\t\t\t    <div>\r\n\t\t\t\t    \t<span onDoubleClick={onEditMode}>{props.status || '--------'}</span>\r\n\t\t\t\t    </div>\r\n                }\r\n                {editmode &&\r\n                    <div>\r\n                        <input onBlur={offEditMode} onChange={onStatusChange} value={status} autoFocus/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n};\r\n\r\n","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../../../Redux/Profile-reducer\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport function ProfileInfo({profile, status, updateStatus}: ProfileInfoPropsType) {\r\n\r\n    if(!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    console.log(profile)\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dashboard}>Dashboard</div>\r\n            <div className={s.descr}>\r\n                <img src={profile.photos.small} alt=\"\"/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                <div>Full Name: {profile.fullName}</div>\r\n                <div>About: {profile.aboutMe}</div>\r\n                <div>VK: {profile.contacts.vk}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\nexport function Post(props: PostPropsType) {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img\r\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQn-HdBk6kXnLfK7VTkMn3YWhoct3OsGPUoFA&usqp=CAU\"\r\n                    alt=\"ava\"/>\r\n                {props.message}\r\n                <div>\r\n                    <span>Likes</span> {props.likesCount}\r\n                </div>\r\n                <div>\r\n                    <span>Dislikes</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsStateType} from \"../../../Redux/Profile-reducer\";\r\nimport {InjectedFormProps, reduxForm, Field} from \"redux-form\";\r\nimport {required, maxLengthCreator} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    posts: Array<PostsStateType>\r\n}\r\n\r\nexport const MyPosts = React.memo( (props: MyPostsPropsType) => {\r\n\r\n    const posts = props.posts.map(p => <Post id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    // const newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    // const onAddPost = () => {\r\n    //     props.addPost()\r\n    // }\r\n    //\r\n    // const onChangeHandler = () => {\r\n    //     let text = newPostElement.current ? newPostElement.current.value : \"\";\r\n    //     props.updateNewPostText(text);\r\n    // }\r\n\r\n    const addNewPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <AddNewPostReduxForm onSubmit={addNewPost}/>\r\n            <div>\r\n                New Post\r\n            </div>\r\n            <div className={s.posts}>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst AddNewPostForm = (props: InjectedFormProps) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newPostText\"} placeholder='Post message'\r\n                       validate={[required, maxLength30]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<any>({form: \"profileAddNewPostForm\"})(AddNewPostForm)\r\n","import {addPost, PostsStateType} from \"../../../Redux/Profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/Redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MyPostsContainerPropsType ={}\r\n\r\nexport type MapStateToPropsType = {\r\n    posts: Array<PostsStateType>\r\n\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPost(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, MyPostsContainerPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n","import React from \"react\";\r\nimport s from \"./Profile.module.css\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../Redux/Profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport function Profile(props: ProfilePropsType) {\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Profile} from \"../Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUsersProfile, ProfileType, updateStatus} from \"../../../Redux/Profile-reducer\";\r\nimport {AppStateType} from \"../../../Redux/Redux-store\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\ntype ProfileContainerPropsType  = {}\r\n\r\ntype PathParamsType = {\r\n    userID: string\r\n}\r\nexport type MapStateToPropsType = {\r\n    profile: ProfileType | {},\r\n    status: string\r\n    authorizedUserId: any\r\n    isAuth: boolean\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    getUsersProfile: (userID: string) => void\r\n    getStatus: (userID: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype ownPropsType = MapStateToPropsType & MapDispatchToPropsType ;\r\n\r\ntype ProfilePropsType = RouteComponentProps<PathParamsType> & ownPropsType;\r\n\r\n  class ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    componentDidMount(): void {\r\n\r\n        let userID = this.props.match.params.userID;\r\n        if (!userID) {\r\n            userID = this.props.authorizedUserId;\r\n            if (!userID){\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUsersProfile(userID)\r\n        this.props.getStatus(userID)\r\n        // setTimeout(() => {\r\n        //\r\n        // }, 1000)\r\n    }\r\n\r\n    render() {\r\n        if(Object.keys(this.props.profile).length === 0) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile as ProfileType}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, ProfileContainerPropsType, AppStateType>(mapStateToProps, {\r\n        getUsersProfile, getStatus, updateStatus\r\n    }),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}