{"version":3,"sources":["components/Navbar/Dialogs/Dialogs.module.css","components/Navbar/Dialogs/DialogItem/DialogsItem.tsx","components/Navbar/Dialogs/Message/Message.tsx","components/Navbar/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Navbar/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","Dialogs","React","memo","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","AddMessageFormRedux","onSubmit","values","onSendMessageClick","newMessageBody","maxLength","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","validate","required","placeholder","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageBodyCreator","Component","restProps"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCQ5M,SAASC,EAAWC,GACvB,IAAIC,EAAK,YAAcD,EAAME,GAC7B,OACI,yBAAKC,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,SAC7B,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,OCL/B,SAASC,EAAQT,GACpB,OACI,yBAAKG,UAAWC,IAAEM,SAAUV,EAAMU,S,qCCOpCC,EAAsCC,IAAMC,MAAK,SAACb,GAEpD,IAAIc,EAAQd,EAAMe,YAEZC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAACpB,EAAD,CAAYqB,IAAKD,EAAEjB,GAAIA,GAAIiB,EAAEjB,GAAIM,KAAMW,EAAEX,UAClFa,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAACd,EAAD,CAASW,IAAKG,EAAErB,GAAIA,GAAIqB,EAAErB,GAAIQ,QAASa,EAAEb,aAkB1F,OACI,yBAAKP,UAAWC,IAAEa,SACd,yBAAKd,UAAWC,IAAEoB,cACbR,GAEL,yBAAKb,UAAWC,IAAEkB,UACd,6BAAMD,GACN,kBAACI,EAAD,CAAqBC,SAlBX,SAACC,GACnB3B,EAAM4B,mBAAmBD,EAAOE,wBA2BlCC,EAAYC,YAAiB,IAgB7BN,EAAsBO,YAAe,CAACC,KAAM,wBAAtBD,EAdL,SAAChC,GACpB,OACI,0BAAM0B,SAAU1B,EAAMkC,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUT,GAC1CtB,KAAM,iBAAkBgC,YAAY,wBAE/C,6BACI,6CAQD7B,I,2CClET8B,EAA6B,SAAC3B,GAChC,MAAO,CACH4B,OAAQ5B,EAAM6B,KAAKD,SCsBZE,sBACXC,aAdkB,SAAC/B,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAAC+B,GACtB,MAAO,CACHlB,mBAAoB,SAACC,GAClBiB,EAASC,YAAuBlB,UDbpC,SAA8BmB,GASjC,OAFgCH,YAAQJ,EAARI,EANF,SAAC7C,GACnB,IAAK0C,EAAwB1C,EAAxB0C,OAAWO,EAAhB,YAA6BjD,EAA7B,GACA,OAAI0C,EACG,kBAACM,EAAcC,GADH,kBAAC,IAAD,CAAU1C,GAAI,gBCelCqC,CAGbjC","file":"static/js/4.fa1b2405.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3J3r6\",\"dialogsItems\":\"Dialogs_dialogsItems__33U4G\",\"dialog\":\"Dialogs_dialog__gtXCz\",\"active\":\"Dialogs_active__3KemJ\",\"messages\":\"Dialogs_messages__3W5Us\",\"message\":\"Dialogs_message__3BRgR\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport function DialogItem(props: DialogItemPropsType) {\r\n    let path='/dialogs/' + props.id;\r\n    return (\r\n        <div className={`${s.dialog} ${s.active}`}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype MessagePropsType ={\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport function Message(props: MessagePropsType) {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPageStateType} from \"../../../Redux/Dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogsPageStateType\r\n    onChangeHandler: (body: string) => void\r\n    onSendMessageClick: (newMessageBody: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = React.memo((props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    const dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n    const messagesElements = state.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)\r\n    // const newMessageBody = state.newMessageBody;\r\n    //\r\n    // const onSendMessageClick = () => {\r\n    //     props.onSendMessageClick();\r\n    // }\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        props.onSendMessageClick(values.newMessageBody)\r\n    }\r\n\r\n    // const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let body = e.currentTarget.value;\r\n    //     props.onChangeHandler(body)\r\n    // }\r\n\r\n    // if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props: InjectedFormProps) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLength]}\r\n                       name={\"newMessageBody\"} placeholder=\"Enter Your message\"/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<any>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport {AppStateType} from \"../Redux/Redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport type MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T> (Component: React.ComponentType<T>) {\r\n        const RedirectComponent = (props: MapStateToPropsType) => {\r\n                let {isAuth, ...restProps} = props;\r\n                if(!isAuth) return <Redirect to={'/login'}/>\r\n                return <Component {...restProps as T}/>\r\n        }\r\n\r\n   let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {\r\n    DialogsPageStateType,\r\n    sendMessageBodyCreator,\r\n} from \"../../../Redux/Dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/Redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport { withAuthRedirect } from \"../../../hoc/WithAuthRedirect\";\r\n\r\ntype DialogsContainerPropsType ={}\r\n\r\nexport type MapStateToPropsType = {\r\n    dialogsPage: DialogsPageStateType,\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    onSendMessageClick: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onSendMessageClick: (newMessageBody: string) => {\r\n           dispatch(sendMessageBodyCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, DialogsContainerPropsType, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}